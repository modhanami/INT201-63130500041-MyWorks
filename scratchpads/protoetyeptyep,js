function Person(name) {
  this.name = name;
  this.greeting = function () {
    console.log(`Person ${this.name}: boing boing`);
  }
}

Person.prototype.greeting = function () {
  console.log(`Person ${this.name}: boing boing but from the prototype`);
}

function Student(name, age) {
  // debugger;
  Person.call(this, name); // pass on the this content to the Person constructor
  this.age = age;
  this.greeting = function () {
    console.log(`Student ${this.name}, ${this.age}: H`);
  }
}

Student.prototype = Object.create(Person.prototype); // the same as Student.prototype.__proto__ = Person.prototype;
Student.prototype.constructor = Student;
Student.prototype.greeting = function greetingStudent() {
  console.log(`Student ${this.name}, ${this.age}: H but from the prototype`);
};

console.log(Student.prototype, 'Student.prototype');

// rewrite below console.log() but swap 2 arguments for each line;
console.log(Person.prototype, 'Person.prototype');
console.log(Student.prototype, 'Student.prototype');
console.log(Student.prototype.__proto__ === Person.prototype, 'Student.prototype.__proto__ === Person.prototype');

const pA = new Person('pA');
const pB = new Person('pB');
const stdA = new Student('stdA', 20);
const stdB = new Student('stdB', 21);

console.log(pA);
console.log(pB);
console.log(stdA);
console.log(stdB);
console.log('stdA.greeting()'); 
stdA.greeting();

// console.log(Person.prototype);
// console.log(a.__proto__)
// const abcA = new abc();
// console.log(abc.prototype.__proto__)
// console.log(abcA.__proto__.__proto__)
// console.log(abc.prototype == abcA.__proto__)


// const bucket = Object.create({
//   hello: function () {
//     console.log('hello');
//   }
// })

// bucket2 = {
//   name: 123,
//   hello: function () {
//     console.log(this.name);
//   },
//   __proto__: {
//     hello: function () {
//       console.log(this.name);
//     },
//   },
//   nested: {
//     name2: this.name,
//     hello: function () {
//       console.log(this.name2);
//     },
//   },
// }

// bucket3 = Object.assign({}, bucket2);
// bucket3.name = 456;

// function Shape(name, sides, sideLength) {
//   this.name = name;
//   this.sides = sides;
//   this.sideLength = sideLength;
// }

// // Write your code below here
// Shape.prototype.calcPerimeter = function() {
//   console.log(this.sides * this.sideLength);
// };

// const square = new Shape('square', 4, 5);
// square.calcPerimeter();

// const triangle = new Shape('triangle', 3, 3);
// triangle.calcPerimeter();

// const asd = Object.create(Shape);
// const aaa = new asd();

class PersonPvt {
  #name

  constructor(name) {
    this.#name= name;
    console.log(this.getName(), `this.getName()`);
  }

  get name() {
    return this.#name;
  }

  set name(name) {
    this.#name = name;
  }

  getName() {
    return this.name;
  }

  static getPrivateName(person) {
    return person.#name;
  }
}

// const getPrivateName = (person) => {
//   return person.#name;
// }

const aPvt = new PersonPvt('a');
// a.getLength();
// a.name
console.log(aPvt.name, `aPvt.name`)
// a.name = 123;
// console.log(PersonPvt, `PersonPvt`)
console.log(aPvt, `aPvt`)
// console.log(getPrivateName(a), `getPrivateName(a)`)
console.log(PersonPvt.getPrivateName(aPvt), `PersonPvt.getPrivateName(aPvt)`)
// console.log(a.#_name)